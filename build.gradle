// This sets us up for building a forge project - you need all of these
buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

// Apply the forge plugin - this adds all the magic for automatically obfuscating, deobfuscating etc
apply plugin: 'forge'

String maj = new File('version/maj').getText('UTF-8')
String min = new File('version/min').getText('UTF-8')
String rev = new File('version/rev').getText('UTF-8')

def versionInfo = getGitVersion()
version=maj+'.'+min+'.'+rev

if (project.hasProperty('buildNumber')) {
 version += "." + project.buildNumber
} else {
 version += ".NoBuildNumber"
}

group= "fr.ftnt.mineswagg" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "MineSwagg"

minecraft {
    version = "1.7.10-10.13.4.1558-1.7.10"
    runDir = "eclipse"
}

dependencies {
	compile "cpw.mods:ironchest:1.7.10-6.0.62.742:deobf"
}

processResources
{
    // we're omitting the .xcf files - they're development only
	exclude '**/*.xcf'
    // we only want to do search/replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
		include 'version.properties'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

	// generate version.properties file from the git version data earlier
	doLast {
		def propsFile = new File(destinationDir, 'version.properties')
		def properties = new Properties()
		properties.putAll(versionInfo)
		properties['MineSwagg.build.mcversion'] = project.minecraft.version
		properties.store(propsFile.newWriter(), null)
	}
}

// this sets our output jar to have a 'tag' of 'universal' on it
// It also adds the minecraft version in a custom version name
// The result is files named <projectname>-<mcversion>-<version>-universal.jar
jar {
    classifier = 'universal'
    version = "${project.minecraft.version}-${project.version}"

}

println "FISHBUM ${jar.version}"

// Add in a source jar for people, should they desire to download such a thing
task sourceJar(type: Jar) {
	from sourceSets.main.allSource
	classifier = 'src'
    version = "${project.minecraft.version}-${project.version}"
}

// Add in an mcp named jar, for those who wish to run in a development environment (assuming mcp naming matches)
task deobfJar(type: Jar) {
	from sourceSets.main.output
	classifier = 'dev'
    version = "${project.minecraft.version}-${project.version}"
}

// Tell the artifact system about our extra jars
artifacts {
	archives sourceJar, deobfJar
}

// Configure an upload task. this is setup for uploading to files.minecraftforge.net. There are other examples around
def getGitVersion()
{
	def out = [:]

	String bn = "NoBuildNumber"
	if (project.hasProperty('buildNumber')) {
	 bn = project.buildNumber
	}
	String maj = new File('version/maj').getText('UTF-8')
	String min = new File('version/min').getText('UTF-8')
	String rev = new File('version/rev').getText('UTF-8')
	
	out['MineSwagg.build.major.number'] = maj
	out['MineSwagg.build.minor.number'] = min
	out['MineSwagg.build.revision.number'] = rev
	out['MineSwagg.build.number' ] = bn
	out['MineSwagg.version' ] = "${maj}.${min}.${rev}.${bn}".toString()

	return out
}